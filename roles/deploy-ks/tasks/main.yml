- name: Create ns {{ capi_namespace }} if not exist
  shell: |
    kubectl create ns {{ capi_namespace }} --dry-run=client -o yaml | kubectl apply -f -  

- set_fact:
    cluster_name: "{{ (cluster_prefix +'-'+ id_string +'-'+ infra_provider +'-'+ flavor) if (infra_provider != 'azure') else ('capi-' + cluster_prefix +'-'+ id_string +'-'+ infra_provider +'-'+ flavor) }}"

- name: Create output folder
  file:
    path: "/rh/capi/{{ cluster_name }}"
    state: "{{ item }}"
    mode: '0755'
  with_items:
    - absent
    - directory

- name: Prepare {{ cluster_name }} deploy template
  vars:
    instance_type: "{{ [infra_provider] | map('extract', infra_providers) | map(attribute='instance_type') | flatten | join('') }}"
    region: "{{ [infra_provider] | map('extract', infra_providers) | map(attribute='region') | flatten | join('') }}"
    k8s_version: "{{ [infra_provider] | map('extract', infra_providers) | map(attribute='version') | flatten | join('') }}"
    nodes_count: "{{ [infra_provider] | map('extract', infra_providers) | map(attribute='nodes_count') | flatten | join('') }}"
  template: 
    src: "templates/capi-{{ flavor }}.yaml.j2" 
    dest: "/rh/capi/{{ cluster_name }}/{{ cluster_name }}.yaml" 

- name: Create Azure Cluster Identity secret
  shell: |
    kubectl create secret generic cluster-identity-secret \
    --from-literal=clientSecret="{{ azure_client_secret }}" \
    --namespace {{ capi_namespace }} \
    --dry-run=client -o yaml | kubectl apply -f -
  when: infra_provider == 'azure'

- name: Apply {{ cluster_name }} template
  shell: |
    kubectl apply -f /rh/capi/{{ cluster_name }}/{{ cluster_name }}.yaml
  
- name: Wait for deployment completed
  shell: |
    kubectl -n {{ capi_namespace }} get mp -ojson | jq -r '.items[] | select(.spec.clusterName == "{{ cluster_name }}") | .status.phase'
  register: mp_status
  until: mp_status.stdout == 'Running'
  retries: 45
  delay: 60  

- name: Generate kubeconfig
  shell: |
    kubectl --namespace={{ capi_namespace }} get secret {{ cluster_name }} \
    -o jsonpath={.data.value} | base64 --decode \
    > /rh/capi/{{ cluster_name }}/{{ cluster_name }}.kubeconfig

- block: Update kubeconfig SA token for AWS cluster 
  - shell: |
      kubectl --kubeconfig {{ kubeconfig }} apply -f - <<EOF
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: autobot-admin-account
          namespace: kube-system 
      EOF
  
  - shell: |
      kubectl --kubeconfig {{ kubeconfig }} apply -f - <<EOF
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: autobot-admin-binding
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: ServiceAccount
          name: autobot-admin-account
          namespace: kube-system      
      EOF

  - shell: |
      kubectl --kubeconfig {{ kubeconfig }} apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          annotations:
            kubernetes.io/service-account.name: autobot-admin-account
          name: autobot-admin-account
          namespace: kube-system
        type: kubernetes.io/service-account-token      
      EOF

  - shell: |
      kubectl --kubeconfig {{ kubeconfig }} get secret autobot-admin-account -n kube-system -o jsonpath='{.data.token}' | base64 -d
    register: autobot_sa_token

  - shell: |
      sed -ri 's/^(\s*)(token\s*: .*$)/\1token: {{ autobot_sa_token.stdout }}/' {{ kubeconfig }}
  vars:
    kubeconfig: "/rh/capi/{{ cluster_name }}/{{ cluster_name }}.kubeconfig" 
  when: infra_provider == "aws"  
